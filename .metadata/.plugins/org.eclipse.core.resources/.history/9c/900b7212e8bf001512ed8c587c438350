package com.blackparty.questionclassifier.core;
import java.util.ArrayList;
import java.util.List;

import com.blackparty.models.QuestionItem;

public class Splitter {
	private QuestionItem questionItem;
	private String regex = " ?(?<!\\G)((?<=[^\\p{Punct}])(?=\\p{Punct})|\\b) ?";
	
	public Splitter(){}
	
	public QuestionItem split(String input){
		String[] temp = input.split(regex);
		
		
		return questionItem; 
	}
	
	public List<String> mergeExpression(String[] input){
		List<String> temp = new ArrayList<String>();
        System.out.println("Length: " + input.length);
        int i;

        for (i = 0; i < input.length; i++) {
            //check if index has open parenthesis
            if(input[i].contentEquals("(")){
                
            }
        }
        //if not, check if index has arithmetic operation (+ - * /)
        return temp;
	}
	
	
	public List<String> mergeFraction(String[] split) {
        List<String> temp = new ArrayList<String>();
        System.out.println("Length: " + split.length);
        int i;
        try {
            for (i = 0; i < split.length; i++) {
                System.out.println("> " + split[i]);
                if (i == split.length - 1) {
                    temp.add(split[i]);
                } else if (!split[i].contentEquals(".")) {
                    temp.add(split[i]);
                } else {
                    //merges current index to the next two indexes of the array.
                    System.out.println("last index : " + temp.get(temp.size() - 1));

                    temp.set(temp.size() - 1, temp.get(temp.size() - 1) + "." + split[i + 1]);
                    System.out.println("last index after merge: " + temp.get(temp.size() - 1));
                    i++;
                }
            }
        } catch (NullPointerException e) {
            //continue running the program.
            System.out.println("<> ---null pointer hit--- <>");
        } catch (ArrayIndexOutOfBoundsException e) {
            //continue running the process
            System.out.println("<> ---array index hit--- <>");
        }
        return temp;
    }
	
	
}
