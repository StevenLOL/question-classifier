package com.blackparty.questionclassifier.core;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.blackparty.questionclassifier.models.QuestionItem;
import com.blackparty.questionclassifier.models.Sentence;
import com.blackparty.questionclassifier.models.Word;
import com.sun.org.apache.bcel.internal.generic.StackProducer;

public class Splitter {
	private QuestionItem questionItem;
	private String regex = " ?(?<!\\G)((?<=[^\\p{Punct}])(?=\\p{Punct})|\\b) ?";

	public Splitter() {
	}

	
	public QuestionItem distribute(String input){
		QuestionItem qi = new QuestionItem();
        List<Sentence> sentenceList = new ArrayList();
        Sentence s = new Sentence();

        String[] split = splitter(input);
        ArrayList<Word> wordList = new ArrayList<Word>();
        for (int i = 0; i < split.length; i++) {
            Word w = new Word();
            w.setWord(split[i]);
            wordList.add(w);
            System.out.println("!> "+w.getWord());
            if (wordList.get(wordList.size() - 1).getWord().contentEquals(".")||
            		wordList.get(wordList.size() - 1).getWord().contentEquals("?")) {
                System.out.println("hit!!!!!!!!!!!!");
                if (s.getWordList().size() == 0) {
                	System.out.println("empty");
                    s.setWordList(wordList);
                } else {
                	System.out.println("insert");
                    sentenceList.add(s);
                }
            }
        }
        qi.setSentenceList(sentenceList);
        return qi;
	}
	public String[] splitter(String input) {
		String[] split = input.split(regex);

		//List<String> temp = new ArrayList<String>();
		// check if there are fractions/decimals in the sentence (eg."2A.4C").
		// Should be considered as one
		/*temp = mergeFraction(split);
		split = null;
		split = temp.stream().toArray(String[]::new);
		Arrays.stream(split).forEach(System.out::println);
		System.out.println("");

		temp = null;
		temp = mergeExpression(split);
		split = null;
		split = temp.stream().toArray(String[]::new);
		Arrays.stream(split).forEach(System.out::println);
		System.out.println("");*/
		return split;
	}

	public List<String> mergeExpression(String[] input){
		List<String> temp = new ArrayList<String>();
        System.out.println("Length: " + input.length);
        String expression = null;
        int i;
        for (i = 0; i < input.length; i++) {
            //check if index has open parenthesis
        	if(input[i].contentEquals("(")){
        		int stackParenthesis = 1;
            	expression = "(";
            	do{
                	if(input[i].contentEquals("(")){
                		stackParenthesis++;
                		expression.concat("(");
                	}else if(input[i].contentEquals(")")){
                		stackParenthesis--;
                		expression.concat(")");
                	}else{
                		expression.concat(input[i]);
                	}
                	i++;
                	if(stackParenthesis == 0){
                		break;
                	}
                }while(true);
            }
        	temp.add(expression);
        }
        //if not, check if index has arithmetic operation (+ - * /)
        return temp;
	}

	public List<String> mergeFraction(String[] input) {
		List<String> temp = new ArrayList<String>();
		System.out.println("Length: " + input.length);
		int i;
		try {
			for (i = 0; i < input.length; i++) {
				System.out.println("> " + input[i]);
				if (i == input.length - 1) {
					temp.add(input[i]);
				} else if (!input[i].contentEquals(".")) {
					temp.add(input[i]);
				} else {
					// merges current index to the next two indexes of the
					// array.
					System.out.println("last index : " + temp.get(temp.size() - 1));
					temp.set(temp.size() - 1, temp.get(temp.size() - 1) + "." + input[i + 1]);
					System.out.println("last index after merge: " + temp.get(temp.size() - 1));
					i++;
				}
			}
		} catch (NullPointerException e) {
			// continue running the program.
			System.out.println("<> ---null pointer hit--- <>");
		} catch (ArrayIndexOutOfBoundsException e) {
			// continue running the process
			System.out.println("<> ---array index hit--- <>");
		}
		return temp;
	}

}
