package com.blackparty.questionclassifier.controller;

import java.awt.PageAttributes.MediaType;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import edu.stanford.nlp.trees.TypedDependency;
import net.didion.jwnl.JWNL;
import net.didion.jwnl.JWNLException;
import net.didion.jwnl.data.IndexWord;
import net.didion.jwnl.data.POS;
import net.didion.jwnl.data.PointerUtils;
import net.didion.jwnl.data.list.PointerTargetNodeList;
import net.didion.jwnl.dictionary.Dictionary;

import com.blackparty.questionclassifier.DAO.QuestionItemDAO;
import com.blackparty.questionclassifier.core.RelationshipExtractor;
import com.blackparty.questionclassifier.core.Splitter;
import com.blackparty.questionclassifier.core.Tagger;
import com.blackparty.questionclassifier.core.TaggerImpl;
import com.blackparty.questionclassifier.core.Uploader;
import com.blackparty.questionclassifier.models.QuestionItem;
import com.blackparty.questionclassifier.models.User;


@Controller
@SessionAttributes({"user_object","question_object"})
public class QController {
	@Autowired
	private QuestionItemDAO  aiDAO;
	
	
	private String systemMessage;
	private boolean flag;
	
	
	@RequestMapping(value="/view",method = RequestMethod.GET)
	public ModelAndView viewQuestion(
				@RequestParam("question_id")int questionId
			){
		System.out.println(">> "+questionId);
		ModelAndView mav = new ModelAndView("result");
		QuestionItem qi = aiDAO.getQuestion(questionId);
		mav.addObject("question_object",qi);
		return mav;
	}
	
	@RequestMapping(value = "/feed")
	public ModelAndView showFeedPage(@RequestParam(value = "file") MultipartFile file,
			@ModelAttribute("user_object") User user) {
		if (!file.isEmpty()) {
			try {
				Uploader u = new Uploader();
				System.out.println("Uploading File..");
				
				u.upload(file,user,"Knowledge");
			} catch (Exception e) {
				systemMessage = "Upload failed";
				e.getMessage();
			}
		} else {
			systemMessage = "File is empty";
		}
		ModelAndView mav = new ModelAndView("feed", "message", "Running QController.showFeedPage() method.");
		mav.addObject("system_message",systemMessage);
		return mav;
	}

	@RequestMapping(value = "/relational_dependency")
	public ModelAndView getRelationalDependency(@RequestParam(value = "message", required = true) String input) {
		ModelAndView mav = new ModelAndView("feed", "message", "Running QController.index()");
		RelationshipExtractor re = new RelationshipExtractor(input);
		Collection<TypedDependency> returnedInput = re.extract(input);
		mav.addObject("returned_input", returnedInput);
		mav.addObject("input", input);
		return mav;
	}
	@RequestMapping(value = "/pos_tag")
	public ModelAndView getPosTag(@RequestParam(value = "message") String input) {
		ModelAndView mav = new ModelAndView("feed", "message", "Running QController.getPostTag()");
		Tagger tagger = new TaggerImpl();
		String tagged = tagger.tag(input);
		mav.addObject("returned_input", tagged);
		mav.addObject("input", input);
		return mav;
	}
	@RequestMapping(value="/process")
	public ModelAndView startProcess(
			@RequestParam(value="message")String input
			){
		ModelAndView mav = new ModelAndView("feed","message","Running QController.process() method.");
		
		Splitter split= new Splitter();
		QuestionItem qi = split.distribute(input);
		TaggerImpl tagger = new TaggerImpl();
		qi.displayWordValues();
		qi = tagger.tag(qi);
		qi.displayWordWithTags();
		return mav;
	}
	
	@RequestMapping(value="/hypernym")
	public ModelAndView getHypernym(
				@RequestParam(value="message") String message
			){
		//setting up view
		ModelAndView mav = new ModelAndView("feed");
		
		
		IndexWord word = null;
		// Get all of the hypernyms (parents) of the first sense of <var>word</var>
		System.out.println("MESSAGE = "+message);
		try{
			//JWNL initialization
			JWNL.initialize(new FileInputStream("D:\\Yeyah\\School\\Thesis\\question-classifier\\questionclassifier\\WebContent\\jwnl_properties.xml"));
			final Dictionary dictionary = Dictionary.getInstance();
			
			
			word = dictionary.lookupIndexWord(POS.NOUN,message);
			PointerTargetNodeList hypernyms = PointerUtils.getInstance().getDirectHypernyms(word.getSense(1));
			System.out.println("Direct hypernyms of \"" + word.getLemma() + "\":");
			hypernyms.print();
		}catch(JWNLException e){
			e.printStackTrace();
		}catch(FileNotFoundException e){
			e.printStackTrace();
		}
		mav.addObject("returned_input",word.getLemma());
		
		return mav;
	}

}
